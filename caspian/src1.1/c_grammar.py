import c_tokens, re

__all__ = ('grammar', 'TOKEN')

TOKEN = c_tokens.TOKEN_BASE()

grammar = [
    (TOKEN.WHITESPACE, re.compile(r'\s')),
    (TOKEN.FLOAT, re.compile(r'\d+\.\d+\b')),
    (TOKEN.INT, re.compile(r'\d+\b')),
    (TOKEN.STRING, re.compile(r'".*?"')),
    (TOKEN.STRING, re.compile(r"'.*?'")),
    (TOKEN.STRING, re.compile(r"`.*?`")),
    (TOKEN.BOOL(TOKEN.TRUE), re.compile(r'true\b')),
    (TOKEN.BOOL(TOKEN.FALSE), re.compile(r'false\b')),
    (TOKEN.NULL, re.compile(r'null\b')),
    (TOKEN.AND, re.compile(r'and\b')),
    (TOKEN.OR, re.compile(r'or\b')),
    (TOKEN.IN, re.compile(r'or\b')),
    (TOKEN.NOT, re.compile(r'not\b')),
    (TOKEN.AS, re.compile(r'as\b')),
    (TOKEN.FUN, re.compile(r'fun\b')),
    (TOKEN.YIELD, re.compile(r'yield\b')),
    (TOKEN.FROM, re.compile(r'from\b')),
    (TOKEN.RETURN, re.compile(r'return\b')),
    (TOKEN.AWAIT, re.compile(r'await\b')),
    (TOKEN.ASYNC, re.compile(r'async\b')),
    (TOKEN.ABSTRACT, re.compile(r'abstract\b')),
    (TOKEN.STATIC, re.compile(r'abstract\b')),
    (TOKEN.IF, re.compile(r'if\b')),
    (TOKEN.ELIF, re.compile(r'elif\b')),
    (TOKEN.ELIF, re.compile(r'else\b')),
    (TOKEN.SWITCH, re.compile(r'switch\b')),
    (TOKEN.CASE, re.compile(r'switch\b')),
    (TOKEN.DEFAULT, re.compile(r'switch\b')),
    (TOKEN.WHILE, re.compile(r'while\b')),
    (TOKEN.DO, re.compile(r'do\b')),
    (TOKEN.FOR, re.compile(r'for\b')),
    (TOKEN.SUPPRESS, re.compile(r'suppress\b')),
    (TOKEN.THEN, re.compile(r'then\b')),
    (TOKEN.FINALLY, re.compile(r'then\b')),
    (TOKEN.RAISE, re.compile(r'raise\b')),
    (TOKEN.IMPORT, re.compile(r'import\b')),
    (TOKEN.CLASS, re.compile(r'class\b')),
    (TOKEN.AT, re.compile(r'@\b')),
    (TOKEN.PRIMATIVE, re.compile(r'primative\b')),
    (TOKEN.INHERITS, re.compile(r'inherits\b')),
    (TOKEN.PASS, re.compile(r'pass\b')),
    (TOKEN.BREAK, re.compile(r'break\b')),
    (TOKEN.CONTINUE, re.compile(r'continue\b')),
    (TOKEN.NAME, re.compile(r'[a-zA-Z_](?:\w+)*\b')),
    (TOKEN.DOT, re.compile(r'\.\b')),
    (TOKEN.COLON, re.compile(r'\:\b')),
    (TOKEN.EQ, re.compile(r'\=\=\b')),
    (TOKEN.NOT_EQ, re.compile(r'\!\=\b')),
    (TOKEN.AMP, re.compile(r'\&\b')),
    (TOKEN.F_CHAIN, re.compile(r'\|\>\b')),
    (TOKEN.PIPE, re.compile(r'\|\b')),
    (TOKEN.GE, re.compile(r'\>\=\b')),
    (TOKEN.LE, re.compile(r'\<\=\b')),
    (TOKEN.LAMBDA, re.compile(r'\=\>\b')),
    (TOKEN.PLUS_EQ, re.compile(r'\+\=\b')),
    (TOKEN.MINUS_EQ, re.compile(r'\-\=\b')),
    (TOKEN.STAR_EQ, re.compile(r'\*\=\b')),
    (TOKEN.DIV_EQ, re.compile(r'/\=\b')),
    (TOKEN.MOD_EQ, re.compile(r'%\=\b')),
    (TOKEN.INC, re.compile(r'\+\+\b')),
    (TOKEN.DEC, re.compile(r'\-\-\b')),
    (TOKEN.PLUS, re.compile(r'\+\b')),
    (TOKEN.MINUS, re.compile(r'\-\b')),
    (TOKEN.STAR, re.compile(r'\*\b')),
    (TOKEN.DIV, re.compile(r'/\b')),
    (TOKEN.MOD, re.compile(r'%\b')),
    (TOKEN.ASSIGN, re.compile(r'\=\b')),
    (TOKEN.LT, re.compile(r'\<\b')),
    (TOKEN.GT, re.compile(r'\>\b')),
    (TOKEN.SEMICOLON, re.compile(r'\;\b')),
    (TOKEN.IS, re.compile(r'is\b')),
    (TOKEN.O_PAREN, re.compile(r'\(\b')),
    (TOKEN.C_PAREN, re.compile(r'\)\b')),
    (TOKEN.O_BRACKET, re.compile(r'\{\b')),
    (TOKEN.C_BRACKET, re.compile(r'\}\b')),
    (TOKEN.O_BRACE, re.compile(r'\[\b')),
    (TOKEN.C_BRACE, re.compile(r'\]\b')),
    (TOKEN.POUND, re.compile(r'#\b')),
    (TOKEN.CURLYQ, re.compile(r'~\b')),
]

if __name__ == '__main__':
    print(grammar)